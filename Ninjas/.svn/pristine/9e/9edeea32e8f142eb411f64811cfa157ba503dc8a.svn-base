package projet;

import org.bytedeco.javacpp.opencv_core.Rect;
import org.bytedeco.javacpp.opencv_core.Scalar;
import org.bytedeco.javacpp.opencv_core.Mat;
import static org.bytedeco.javacpp.opencv_imgproc.rectangle;
import static org.bytedeco.javacpp.opencv_core.CV_8UC3;
import static org.bytedeco.javacpp.opencv_imgproc.CV_AA;
import static org.bytedeco.javacpp.opencv_imgproc.CV_FILLED;
import static org.bytedeco.javacpp.opencv_core.Mat.zeros;

public class EnergyBar extends Showable {
	private final int maxEnergy;
	private int energy;
	private boolean used;
	
	public EnergyBar(Webcam w) {
		super(w, w.width - 120, w.height - 30, 106, 16);
		maxEnergy = 10;
		energy = 0;
		used=false;
	}
	
	public Mat getImage() {
		Mat image = zeros(height, width, CV_8UC3).asMat();
		rectangle(image, new Rect(0, 0, width, height), Scalar.RED, 3, CV_AA, 0);
		rectangle(image, new Rect(3, 3, (width-6)*energy/maxEnergy, height-6), Scalar.GREEN, CV_FILLED, CV_AA, 0);
		return image;
	}
	
	/**
	 * Augmente l'�nergie de 1 si elle n'est pas d�j� au maximum.
	 */
	public void increase() {
		if (! isFull()) energy++;
	}
	
	/**
	 * Renvoie vrai si l'�nergie est au maximum.
	 * @return
	 */
	public boolean isFull() {
		return energy == maxEnergy;
	}
	
	/**
	 * Remet l'�nergie � 0.
	 */
	public void reset() {
		Utility.playSound("lightning.wav");
		energy = 0;
		used=false;
	}
	
	/**
	 * Met la valeur de used � true.
	 */
	public void use() {
		Utility.playSound("lightning.wav");
		used=true;
	}
	
	/**
	 * Renvoie vrai l'�nergie � �t� utilis�e, c'est � dire si used vaut true.
	 * @return
	 */
	public boolean isUsed() {
		return used;
	}
	
}
